//?  Task 1 üíª
function getSum(num) {
    let sum = 0;
    for (let i = 0; i <= num; i++) {
        sum += i;
    }
    return sum;
}
console.log(getSum(100));
//?  Task 2 üíª 
// {
//! 1 Method –ù–µ –∑–Ω–∞—é —Ö–æ—Ç–µ–ª —Å–¥–µ–ª–∞—Ç—å –ß—É—Ç—å –ø–æ –±–æ–ª—å—à–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏ —Å —Ñ—É–Ω–∫—Ü    
// let youngFamily = confirm('–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –º–æ–ª–æ–¥–æ–µ —Å–µ–º—å–µ–π');
// const creditPercen = 17;
// const youngFamilyCreditPercen = 4.5; 
// let creditSum = +prompt('–ö–∞–∫—É—é —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å? RUB', 25000);
// let creditPeriod = +prompt('–ù–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç? –ú–µ—Å', 36);
// function getPercenLoan(money, percen, period) {
//     if (youngFamily) {
//         return ((creditSum * creditPeriod) / 100) * youngFamilyCreditPercen;    
//     } else {
//         return ((creditSum * creditPeriod) / 100) * creditPercen;
//     }
// }
// let getMonthPay = (creditSum, creditPeriod) => (creditSum / creditPeriod);
// let monthPay = getMonthPay(creditSum, creditPeriod);
// let result = getPercenLoan(creditSum, youngFamilyCreditPercen, creditPeriod);
// alert(`–ò—Ç–æ–≥–æ: ${result} —Ä—É–±`);
// console.log(`–µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂: ${Math.trunc(monthPay)}—Ä—É–±`);
// }
//!2 Method
// function getCredit(sumCredit) {
//     let year = 5;
//     let percentCredit = 0.17;
//     return sumCredit = (sumCredit * year) / percentCredit 
// }
// let result = Math.round(getCredit(10000));
// console.log(`–í–∞—à–∞ –ø–µ—Ä–µ–ø–ª–∞—Ç–∞: ${result}`);

//? Task 3 üíª ??? –º–æ–∂–µ—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–∞—Ç—å ?
// {
// //! 1) Method
// function trimString(str, from, to) {
//     if (str.length <= from) {
//         return str.slice(0, from);
//     } else if (str.length >= to) {
//         return str.slice(0, to);
//     }
// }
// let result = trimString('ARROW', 0, 3);
// console.log(result);

// //! 2) Method 
// function trimString(str, from, to) {
//     return str.slice(from, to);
// }
// console.log(trimString('Arrow', 0, 3));

//! 3) Method 
// let trimString = (str, from, to) => str.slice(from, to);
// console.log(trimString('Lorem', 0, 3));
// }

//? Task 4 üíª
//? –≠—Ç–æ —è –Ω–∞—á–∞–ª —Å–∞–º –¥–µ–ª–∞—Ç—å –Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–ª–æ—Å—å –ø—Ä–∏—à–ª–æ—Å—å –∏—Å–∫–∞—Ç—å –≤ –≥—É–≥–ª–µ :( –ú–æ–∂–µ—Ç–µ –¥–∞—Ç—å –Ω–µ–±–æ–ª—å—à—É—é –ø–æ–¥—Å–∫–∞–∑–¥–∫—É —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å –ø–æ –¥—Ä—É–≥–æ–º—É.
// let year = 2021;
// let getSumNumbers = () => year[0] + year[1] + year[2] + year[3];
// let result = getSumNumbers;
// console.log(result);
//! —ç—Ç–æ—Ç –∫–æ–¥ —è –Ω–∞—à–µ–ª –≤ –≥—É–≥–ª–µ –∏–∑–º–µ–Ω–∏–ª –µ–≥–æ —Å–∞–º—É—é –º–∞–ª–æ—Å—Ç—å 
{let arr = [2, 0, 2, 1];
let getSumNumbers = arr.reduce((a, b) => a + b, 0);
let result = getSumNumbers;
console.log(result);}
//? Task 5 üíª
{function getSum (a, b) {
    if (a === b) {
        console.log(`${a} Since both are same`);
    } else {
        return (a + b);
    }
}
let result = getSum(-1, 0);
console.log(result);}

//? Task 6 üíª
//! 1 –º–µ—Ç–æ–¥
{function fooboo (bool, foo, boo) {
    if (bool) {
        return foo;
    } else {
        return boo;
    }
}
let result = fooboo(0, `true: foo`, `false: boo`);
console.log(result);}
//! 2 –º–µ—Ç–æ–¥ 
// let arrFooBoo = (bool, foo, boo) => {
//     const result = bool ? foo : boo
//     console.log(result);
// }
// arrFooBoo(1, `true: foo`, `false: boo`);

//? Task 1 üë®‚Äçüè´ 
{function getTriangle(a, b, c) {
    const triangleLength = 20;
        if (a + b + c < triangleLength) {
            return (a + b + c + ' triangle true');
        } else {
            console.log(`triangle false`);
        }
}
let result = getTriangle(5, 10, 4);
console.log(result);}

//! 2)
// const triangleLength = 20;
// let triangleSum = (a, b, c) => a + b + c;
// let result = triangleSum(4, 10, 1) < triangleLength ? console.log('true') : console.log('false');

//? Task 2 üë®‚Äçüè´ 
{function getChocolatePiece(h, w) {
    if (h >= 1 && w >= 1) {
        return (h * w) - 1;
    } else {
        console.log('False');
    }
}
let result = getChocolatePiece(3, 1);
console.log(`–ù—É–∂–Ω–æ: ${result} –Ω–∞–¥–ª–æ–º–∞`);}

//? Task 3 üë®‚Äçüè´ 
//! 1)–ë–µ—Ä–µ—Ç —Ü–µ–Ω—ã –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –∏ —Å—É–º–º–∏—Ä—É–µ—Ç –∏—Ö –Ω–æ –ø–æ—á–µ–º—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç else? –Ω–µ –ø–æ–Ω—è–ª
// let creditCard = 1500;
// const NDS = 12.5;
// let phones = {
//     brand: ['Apple', 'Samsung', 'Xiaomi', 'OnePlus',],
//     model: ['iphone11', 'iphone12', 'iphone13'],
//     price: [450, 650, 799, 1099,],
// }
// let headphones = {
//     brand: ['Apple','JBL','Sony','Marshall'],
//     model: ['Airpods 2', 'JBL GO', 'WH-1000XM4', 'Airpods Pro'],
//     price: [99, 199, 599, 799],
// }
// // –Ω–µ –¥–æ–∫–æ–Ω—Ü–∞ –ø–æ–Ω—è–ª —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç ?))
// // let i = 0;
// // while (i === creditCard) {
// //     basketPrice()
// // }
// function basketPrice(phones, headphones) {
//     if(phones <= creditCard && headphones <= creditCard) {
//         return (phones + headphones);
//     } else {
//         console.log('–£ —Ç–µ–±—è –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –∫–∞—Ä—Ç–µ');
//     }
// }
// let result = basketPrice(phones.price[3], headphones.price[3]);
// let resultNDS = (result / 100) * NDS + result;
// console.log(`–°—É–º–º–∞ —Å –ù–î–°: ${resultNDS}$`);

//! 3)
{let creditCard = +prompt('–°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ —É –≤–∞—Å –Ω–∞ —Å—á–µ—Ç—É –≤ $', '1000');
let phone = +prompt('–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å Iphone XR $', '450');
let headphone = +prompt('–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å Airpods 2 $', '150');
const nds = 12;
let i = 0
while (i <= creditCard) {
    i++;
    function getBasketPrice (phones, headphones) {
        if(phones + headphones <= creditCard) {
            return (phones + headphones);
        } else {
            console.log('–£ —Ç–µ–±—è –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç–µ');
        }
    }
}
let result = getBasketPrice(phone, headphone);
let resultNds = (result / 100)* nds + result; 
alert(resultNds);}
