// Можно посмотреть работу методов прямо на любом сайте. Например https://learn.javascript.ru/

// localStorage и sessionStorage содержат методы и свойства:

// length – количество элементов в хранилище
// setItem(key, value) – сохранить пару ключ/значение. ('test', 1)
// getItem(key) – получить данные по ключу key. (обратите внимание на возвращаемое строковое значение)
// removeItem(key) – удалить данные с ключом key
// clear() – чистит storage
// key(index) – получить ключ на заданной позиции

// можно и так: (не рекомендуется)
// localStorage.test;
// localStorage.test = 2;
// delete localStorage.test;

// Как мы можем перебрать ключи?
// for(let i = 0; i < localStorage.length; i++) {
//     let key = localStorage.key(i);
//     console.log(`${key}: ${localStorage.getItem(key)}`);
// }

// Почему localStorage чаще используется?
// Засетаем поле с помощью sessionStorage.setItem('test', 1);
// …Но если вы откроете ту же страницу в другой вкладке и попробуете получить данные снова, то код выше вернёт null, что значит «ничего не найдено».
// Так получилось, потому что sessionStorage привязан не только к источнику, но и к вкладке браузера.

// -------------------------------

// ONLY STRINGS
// Обратите внимание, что ключ и значение должны быть строками.
// Если мы используем любой другой тип, например число или объект, то он автоматически преобразуется в строку:

// Т.к. хранилище работает только со строками, мы можем воспользоваться
// глобальным обьектом JSON и его методами чтобы преобразовывать разные типы
// данных в строку.

// Про JSON
// JSON – удобный и универсальный формат передачи данных в интернете 
// JSON (JavaScript Object Notation)
// Формат JSON используется для упорядоченного хранения данных в процессе их обмена между веб-браузером или клиентской частью приложения и сервером или между разными серверами. Более того, благодаря текстовому виду строки, данные JSON можно легко передавать через любые другие каналы обмена информацией в интернете. Для получения доступа к содержащимся в нем данным файл .json должен быть превращен в объект JavaScript, для чего в этом языке имеются соответствующие методы преобразования.

// для чего нам может понадобится JSON?
// localStorage.setItem("user", {name: 'Pasha', age: 27});
// localStorage.getItem('user'); (Object object);

// Мы можем использовать JSON для хранения объектов:
// localStorage.setItem('user', JSON.stringify({name: 'Pasha', age: 27}));
// localStorage.getItem('user');

// А обратно как?
// localStorage.getItem('user'); - получим строку, а нам объект нужен
// обратный процесс с помощью JSON.parse
// const user = localStorage.getItem('user');
// JSON.parse(user);

// или сразу JSON.parse(localStorage.getItem('user'));

// -------------------------------

// Событие storage
// Когда обновляются данные в хранилище, генерируется событие storage
// window.addEventListener('storage', (event) => {
// делаем что-то, когда происходит данное событие
//})

// Важно: событие срабатывает на всех остальных объектах window, где
// доступно хранилище, кроме того окна, которое его вызвало.

// Демонстрируем запустив 2 вкладки
window.addEventListener('storage', (event) => {
    console.log(event.oldValue);
});

localStorage.setItem('theme', 'light');

// Когда обновляются данные в localStorage или sessionStorage, генерируется событие storage со следующими свойствами:
// key – ключ, который обновился (null, если вызван .clear()).
// oldValue – старое значение (null, если ключ добавлен впервые).
// newValue – новое значение (null, если ключ был удалён).
// url – url документа, где произошло обновление.
// storageArea – объект localStorage или sessionStorage, где произошло обновление.